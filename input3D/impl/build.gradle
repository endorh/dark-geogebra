plugins {
    id 'java-library'
    id 'eclipse'
    id 'org.gradlex.extra-java-module-info'
}

project.setDescription('Parts of GeoGebra related to input devices (Leonar3Do, Intel RealSense, zSpace)')

compileJava {
    sourceCompatibility = 17
    targetCompatibility = 17
}

compileTestJava {
    sourceCompatibility = 17
    targetCompatibility = 17
}

dependencies {
    api project(':common'),
        project(':common-jre'),
        'intel.rssdk:libpxcclr:20150901',
        'com.zspace:zspace:20180405a'
    runtimeOnly 'intel.rssdk:libpxcclr:20150901:natives-windows-amd64',
        'intel.rssdk:libpxcclr:20150901:natives-windows-i586',
        'com.zspace:zspace:20180405a:natives-windows-i586',
        'com.zspace:zspace:20180405a:natives-windows-amd64'
}

extraJavaModuleInfo {
    automaticModule('annotations-2.8.jar', 'com.google.j2objc')
    automaticModule('jsr305-3.0.2.jar', 'com.google.code.findbugs')
    automaticModule('libpxcclr-20150901.jar', 'com.intel.rssdk')
    automaticModule('zspace-20180405a.jar', 'com.zspace')
}

eclipse.classpath.file.whenMerged { classpath ->
    // Search for the .java.jar library:
    def realsense = classpath.entries.findResult { entry ->
        if (entry.kind == 'lib' && entry.path.contains('libpxcclr')) {
            return entry
        }
    }

    // Unzip the native .jar files (which contain a .dll file):
    def realsense_java = sourceSets.main.compileClasspath.find { it.name.startsWith("libpxcclr") } 
    def realsense_natives = sourceSets.main.runtimeClasspath.findAll { it.name.startsWith("libpxcclr") && \
        it.name.contains('-natives-')} 
    def realsense_dir = realsense_java.getParent() 
    for (i in realsense_natives) {
        def realsense_native_path = i.getPath()
        ant.unzip(src: realsense_native_path, dest: realsense_dir)
    } 

    // Set .java.jar folder as native library location:
    realsense.setNativeLibraryLocation(realsense_dir)

    // Remove the former native .jar files as direct dependencies:
    classpath.entries.removeAll { entry -> entry.kind == 'lib' && entry.path.contains('libpxcclr') \
        && entry.path.contains('-natives-') }

    // Search for the zspace.jar library (we are doing the same as for libpxcclr above, maybe there is a way to unify):
    def zspace = classpath.entries.findResult { entry ->
        if (entry.kind == 'lib' && entry.path.contains('zspace')) {
            return entry
        }
    }

    // Unzip the native .jar files (which contain a .dll file):
    def zspace_java = sourceSets.main.compileClasspath.find { it.name.startsWith("zspace") } 
    def zspace_natives = sourceSets.main.runtimeClasspath.findAll { it.name.startsWith("zspace") && \
        it.name.contains('-natives-')} 
    def zspace_dir = zspace_java.getParent() 
    for (i in zspace_natives) {
        def myBit = System.getProperty("sun.arch.data.model")
        // def myUsername = System.getProperty("user.name")
        def myHostname = InetAddress.getLocalHost().getHostName()
        def zspace_native_path = i.getPath()
        def thisBit = 64
        if (i.name.contains('i586')) {
            thisBit = 32
        }
        if ((myHostname != "deploy" && myBit == thisBit) || (myHostname == "deploy" && thisBit == 32)) {
            println "zSpace native ${i}, ${thisBit} bit for host ${myHostname} (${myBit} bit) will be used"
            ant.unzip(src: zspace_native_path, dest: zspace_dir)
        }
    } 

    // Set zspace.jar folder as native library location:
    zspace.setNativeLibraryLocation(zspace_dir)

    // Remove the former native .jar files as direct dependencies:
    classpath.entries.removeAll { entry -> entry.kind == 'lib' && entry.path.contains('zspace') \
        && entry.path.contains('-natives-') }
}
