//Generated by CharTableConverter
//!!DO NOT EDIT
package org.freehep.graphics2d.font;

import java.util.Hashtable;

/**
 * Generated Symbol Encoding Table.
 *
 * @author org.freehep.graphics2d.font.CharTableConverter
 * @version $Id: Symbol.java,v 1.4 2009-06-22 02:18:16 hohenwarter Exp $
 */
public class Symbol extends AbstractCharTable {
	private Hashtable<Character, String> unicodeToName = new Hashtable<>();
	private Hashtable<String, Character> nameToUnicode = new Hashtable<>();
	private Hashtable<String, Integer> nameToEnc = new Hashtable<>();
	private String[] encToName = new String[256];

	public Symbol() {

		unicodeToName.put((char) 0x0391, "Alpha");
		nameToUnicode.put("Alpha", (char) 0x0391);
		nameToEnc.put("Alpha", 65);
		encToName[65] = "Alpha";

		unicodeToName.put((char) 0x0392, "Beta");
		nameToUnicode.put("Beta", (char) 0x0392);
		nameToEnc.put("Beta", 66);
		encToName[66] = "Beta";

		unicodeToName.put((char) 0x03a7, "Chi");
		nameToUnicode.put("Chi", (char) 0x03a7);
		nameToEnc.put("Chi", 67);
		encToName[67] = "Chi";

		unicodeToName.put((char) 0x0394, "Delta");
		nameToUnicode.put("Delta", (char) 0x0394);
		nameToEnc.put("Delta", 68);
		encToName[68] = "Delta";

		unicodeToName.put((char) 0x0395, "Epsilon");
		nameToUnicode.put("Epsilon", (char) 0x0395);
		nameToEnc.put("Epsilon", 69);
		encToName[69] = "Epsilon";

		unicodeToName.put((char) 0x0397, "Eta");
		nameToUnicode.put("Eta", (char) 0x0397);
		nameToEnc.put("Eta", 72);
		encToName[72] = "Eta";

		unicodeToName.put((char) 0x20ac, "Euro");
		nameToUnicode.put("Euro", (char) 0x20ac);
		nameToEnc.put("Euro", 160);
		encToName[160] = "Euro";

		unicodeToName.put((char) 0x0393, "Gamma");
		nameToUnicode.put("Gamma", (char) 0x0393);
		nameToEnc.put("Gamma", 71);
		encToName[71] = "Gamma";

		unicodeToName.put((char) 0x2111, "Ifraktur");
		nameToUnicode.put("Ifraktur", (char) 0x2111);
		nameToEnc.put("Ifraktur", 193);
		encToName[193] = "Ifraktur";

		unicodeToName.put((char) 0x0399, "Iota");
		nameToUnicode.put("Iota", (char) 0x0399);
		nameToEnc.put("Iota", 73);
		encToName[73] = "Iota";

		unicodeToName.put((char) 0x039a, "Kappa");
		nameToUnicode.put("Kappa", (char) 0x039a);
		nameToEnc.put("Kappa", 75);
		encToName[75] = "Kappa";

		unicodeToName.put((char) 0x039b, "Lambda");
		nameToUnicode.put("Lambda", (char) 0x039b);
		nameToEnc.put("Lambda", 76);
		encToName[76] = "Lambda";

		unicodeToName.put((char) 0x039c, "Mu");
		nameToUnicode.put("Mu", (char) 0x039c);
		nameToEnc.put("Mu", 77);
		encToName[77] = "Mu";

		unicodeToName.put((char) 0x039d, "Nu");
		nameToUnicode.put("Nu", (char) 0x039d);
		nameToEnc.put("Nu", 78);
		encToName[78] = "Nu";

		unicodeToName.put((char) 0x03a9, "Omega");
		nameToUnicode.put("Omega", (char) 0x03a9);
		nameToEnc.put("Omega", 87);
		encToName[87] = "Omega";

		unicodeToName.put((char) 0x039f, "Omicron");
		nameToUnicode.put("Omicron", (char) 0x039f);
		nameToEnc.put("Omicron", 79);
		encToName[79] = "Omicron";

		unicodeToName.put((char) 0x03a6, "Phi");
		nameToUnicode.put("Phi", (char) 0x03a6);
		nameToEnc.put("Phi", 70);
		encToName[70] = "Phi";

		unicodeToName.put((char) 0x03a0, "Pi");
		nameToUnicode.put("Pi", (char) 0x03a0);
		nameToEnc.put("Pi", 80);
		encToName[80] = "Pi";

		unicodeToName.put((char) 0x03a8, "Psi");
		nameToUnicode.put("Psi", (char) 0x03a8);
		nameToEnc.put("Psi", 89);
		encToName[89] = "Psi";

		unicodeToName.put((char) 0x211c, "Rfractur");
		nameToUnicode.put("Rfractur", (char) 0x211c);
		nameToEnc.put("Rfractur", 194);
		encToName[194] = "Rfractur";

		unicodeToName.put((char) 0x03a1, "Rho");
		nameToUnicode.put("Rho", (char) 0x03a1);
		nameToEnc.put("Rho", 82);
		encToName[82] = "Rho";

		unicodeToName.put((char) 0x03a3, "Sigma");
		nameToUnicode.put("Sigma", (char) 0x03a3);
		nameToEnc.put("Sigma", 83);
		encToName[83] = "Sigma";

		unicodeToName.put((char) 0x03a4, "Tau");
		nameToUnicode.put("Tau", (char) 0x03a4);
		nameToEnc.put("Tau", 84);
		encToName[84] = "Tau";

		unicodeToName.put((char) 0x0398, "Theta");
		nameToUnicode.put("Theta", (char) 0x0398);
		nameToEnc.put("Theta", 81);
		encToName[81] = "Theta";

		unicodeToName.put((char) 0x0059, "Upsilon");
		nameToUnicode.put("Upsilon", (char) 0x0059);
		nameToEnc.put("Upsilon", 85);
		encToName[85] = "Upsilon";

		unicodeToName.put((char) 0x03a5, "Upsilon1");
		nameToUnicode.put("Upsilon1", (char) 0x03a5);
		nameToEnc.put("Upsilon1", 161);
		encToName[161] = "Upsilon1";

		unicodeToName.put((char) 0x039e, "Xi");
		nameToUnicode.put("Xi", (char) 0x039e);
		nameToEnc.put("Xi", 88);
		encToName[88] = "Xi";

		unicodeToName.put((char) 0x0396, "Zeta");
		nameToUnicode.put("Zeta", (char) 0x0396);
		nameToEnc.put("Zeta", 90);
		encToName[90] = "Zeta";

		unicodeToName.put((char) 0x2135, "aleph");
		nameToUnicode.put("aleph", (char) 0x2135);
		nameToEnc.put("aleph", 192);
		encToName[192] = "aleph";

		unicodeToName.put((char) 0x03b1, "alpha");
		nameToUnicode.put("alpha", (char) 0x03b1);
		nameToEnc.put("alpha", 97);
		encToName[97] = "alpha";

		unicodeToName.put((char) 0x0026, "ampersand");
		nameToUnicode.put("ampersand", (char) 0x0026);
		nameToEnc.put("ampersand", 38);
		encToName[38] = "ampersand";

		unicodeToName.put((char) 0x2220, "angle");
		nameToUnicode.put("angle", (char) 0x2220);
		nameToEnc.put("angle", 208);
		encToName[208] = "angle";

		unicodeToName.put((char) 0x2329, "angleleft");
		nameToUnicode.put("angleleft", (char) 0x2329);
		nameToEnc.put("angleleft", 225);
		encToName[225] = "angleleft";

		unicodeToName.put((char) 0x232a, "angleright");
		nameToUnicode.put("angleright", (char) 0x232a);
		nameToEnc.put("angleright", 241);
		encToName[241] = "angleright";

		unicodeToName.put((char) 0x2248, "approxequal");
		nameToUnicode.put("approxequal", (char) 0x2248);
		nameToEnc.put("approxequal", 187);
		encToName[187] = "approxequal";

		unicodeToName.put((char) 0x2194, "arrowboth");
		nameToUnicode.put("arrowboth", (char) 0x2194);
		nameToEnc.put("arrowboth", 171);
		encToName[171] = "arrowboth";

		unicodeToName.put((char) 0x21d4, "arrowdblboth");
		nameToUnicode.put("arrowdblboth", (char) 0x21d4);
		nameToEnc.put("arrowdblboth", 219);
		encToName[219] = "arrowdblboth";

		unicodeToName.put((char) 0x21d3, "arrowdbldown");
		nameToUnicode.put("arrowdbldown", (char) 0x21d3);
		nameToEnc.put("arrowdbldown", 223);
		encToName[223] = "arrowdbldown";

		unicodeToName.put((char) 0x21d0, "arrowdblleft");
		nameToUnicode.put("arrowdblleft", (char) 0x21d0);
		nameToEnc.put("arrowdblleft", 220);
		encToName[220] = "arrowdblleft";

		unicodeToName.put((char) 0x21d2, "arrowdblright");
		nameToUnicode.put("arrowdblright", (char) 0x21d2);
		nameToEnc.put("arrowdblright", 222);
		encToName[222] = "arrowdblright";

		unicodeToName.put((char) 0x21d1, "arrowdblup");
		nameToUnicode.put("arrowdblup", (char) 0x21d1);
		nameToEnc.put("arrowdblup", 221);
		encToName[221] = "arrowdblup";

		unicodeToName.put((char) 0x2193, "arrowdown");
		nameToUnicode.put("arrowdown", (char) 0x2193);
		nameToEnc.put("arrowdown", 175);
		encToName[175] = "arrowdown";

		unicodeToName.put((char) 0xF8E7, "arrowhorizex");
		nameToUnicode.put("arrowhorizex", (char) 0xF8E7);
		nameToEnc.put("arrowhorizex", 190);
		encToName[190] = "arrowhorizex";

		unicodeToName.put((char) 0x2190, "arrowleft");
		nameToUnicode.put("arrowleft", (char) 0x2190);
		nameToEnc.put("arrowleft", 172);
		encToName[172] = "arrowleft";

		unicodeToName.put((char) 0x2192, "arrowright");
		nameToUnicode.put("arrowright", (char) 0x2192);
		nameToEnc.put("arrowright", 174);
		encToName[174] = "arrowright";

		unicodeToName.put((char) 0x2191, "arrowup");
		nameToUnicode.put("arrowup", (char) 0x2191);
		nameToEnc.put("arrowup", 173);
		encToName[173] = "arrowup";

		unicodeToName.put((char) 0xF8E8, "arrowvertex");
		nameToUnicode.put("arrowvertex", (char) 0xF8E8);
		nameToEnc.put("arrowvertex", 189);
		encToName[189] = "arrowvertex";

		unicodeToName.put((char) 0x2217, "asteriskmath");
		nameToUnicode.put("asteriskmath", (char) 0x2217);
		nameToEnc.put("asteriskmath", 42);
		encToName[42] = "asteriskmath";

		unicodeToName.put((char) 0x007c, "bar");
		nameToUnicode.put("bar", (char) 0x007c);
		nameToEnc.put("bar", 124);
		encToName[124] = "bar";

		unicodeToName.put((char) 0x03b2, "beta");
		nameToUnicode.put("beta", (char) 0x03b2);
		nameToEnc.put("beta", 98);
		encToName[98] = "beta";

		unicodeToName.put((char) 0x007b, "braceleft");
		nameToUnicode.put("braceleft", (char) 0x007b);
		nameToEnc.put("braceleft", 123);
		encToName[123] = "braceleft";

		unicodeToName.put((char) 0x007d, "braceright");
		nameToUnicode.put("braceright", (char) 0x007d);
		nameToEnc.put("braceright", 125);
		encToName[125] = "braceright";

		unicodeToName.put((char) 0xF8F1, "bracelefttp");
		nameToUnicode.put("bracelefttp", (char) 0xF8F1);
		nameToEnc.put("bracelefttp", 236);
		encToName[236] = "bracelefttp";

		unicodeToName.put((char) 0xF8F2, "braceleftmid");
		nameToUnicode.put("braceleftmid", (char) 0xF8F2);
		nameToEnc.put("braceleftmid", 237);
		encToName[237] = "braceleftmid";

		unicodeToName.put((char) 0xF8F3, "braceleftbt");
		nameToUnicode.put("braceleftbt", (char) 0xF8F3);
		nameToEnc.put("braceleftbt", 238);
		encToName[238] = "braceleftbt";

		unicodeToName.put((char) 0xF8FC, "bracerighttp");
		nameToUnicode.put("bracerighttp", (char) 0xF8FC);
		nameToEnc.put("bracerighttp", 252);
		encToName[252] = "bracerighttp";

		unicodeToName.put((char) 0xF8FD, "bracerightmid");
		nameToUnicode.put("bracerightmid", (char) 0xF8FD);
		nameToEnc.put("bracerightmid", 253);
		encToName[253] = "bracerightmid";

		unicodeToName.put((char) 0xF8FE, "bracerightbt");
		nameToUnicode.put("bracerightbt", (char) 0xF8FE);
		nameToEnc.put("bracerightbt", 254);
		encToName[254] = "bracerightbt";

		unicodeToName.put((char) 0xF8F4, "braceex");
		nameToUnicode.put("braceex", (char) 0xF8F4);
		nameToEnc.put("braceex", 239);
		encToName[239] = "braceex";

		unicodeToName.put((char) 0x005b, "bracketleft");
		nameToUnicode.put("bracketleft", (char) 0x005b);
		nameToEnc.put("bracketleft", 91);
		encToName[91] = "bracketleft";

		unicodeToName.put((char) 0x005d, "bracketright");
		nameToUnicode.put("bracketright", (char) 0x005d);
		nameToEnc.put("bracketright", 93);
		encToName[93] = "bracketright";

		unicodeToName.put((char) 0xF8EE, "bracketlefttp");
		nameToUnicode.put("bracketlefttp", (char) 0xF8EE);
		nameToEnc.put("bracketlefttp", 233);
		encToName[233] = "bracketlefttp";

		unicodeToName.put((char) 0xF8EF, "bracketleftex");
		nameToUnicode.put("bracketleftex", (char) 0xF8EF);
		nameToEnc.put("bracketleftex", 234);
		encToName[234] = "bracketleftex";

		unicodeToName.put((char) 0xF8F0, "bracketleftbt");
		nameToUnicode.put("bracketleftbt", (char) 0xF8F0);
		nameToEnc.put("bracketleftbt", 235);
		encToName[235] = "bracketleftbt";

		unicodeToName.put((char) 0xF8F9, "bracketrighttp");
		nameToUnicode.put("bracketrighttp", (char) 0xF8F9);
		nameToEnc.put("bracketrighttp", 249);
		encToName[249] = "bracketrighttp";

		unicodeToName.put((char) 0xF8FA, "bracketrightex");
		nameToUnicode.put("bracketrightex", (char) 0xF8FA);
		nameToEnc.put("bracketrightex", 250);
		encToName[250] = "bracketrightex";

		unicodeToName.put((char) 0xF8FB, "bracketrightbt");
		nameToUnicode.put("bracketrightbt", (char) 0xF8FB);
		nameToEnc.put("bracketrightbt", 251);
		encToName[251] = "bracketrightbt";

		unicodeToName.put((char) 0x2219, "bullet");
		nameToUnicode.put("bullet", (char) 0x2219);
		nameToEnc.put("bullet", 183);
		encToName[183] = "bullet";

		unicodeToName.put((char) 0x21b5, "carriagereturn");
		nameToUnicode.put("carriagereturn", (char) 0x21b5);
		nameToEnc.put("carriagereturn", 191);
		encToName[191] = "carriagereturn";

		unicodeToName.put((char) 0x03c7, "chi");
		nameToUnicode.put("chi", (char) 0x03c7);
		nameToEnc.put("chi", 99);
		encToName[99] = "chi";

		unicodeToName.put((char) 0x2297, "circlemultiply");
		nameToUnicode.put("circlemultiply", (char) 0x2297);
		nameToEnc.put("circlemultiply", 196);
		encToName[196] = "circlemultiply";

		unicodeToName.put((char) 0x2295, "circleplus");
		nameToUnicode.put("circleplus", (char) 0x2295);
		nameToEnc.put("circleplus", 197);
		encToName[197] = "circleplus";

		unicodeToName.put((char) 0x2663, "club");
		nameToUnicode.put("club", (char) 0x2663);
		nameToEnc.put("club", 167);
		encToName[167] = "club";

		unicodeToName.put((char) 0x003a, "colon");
		nameToUnicode.put("colon", (char) 0x003a);
		nameToEnc.put("colon", 58);
		encToName[58] = "colon";

		unicodeToName.put((char) 0x002c, "comma");
		nameToUnicode.put("comma", (char) 0x002c);
		nameToEnc.put("comma", 44);
		encToName[44] = "comma";

		unicodeToName.put((char) 0x2245, "congruent");
		nameToUnicode.put("congruent", (char) 0x2245);
		nameToEnc.put("congruent", 64);
		encToName[64] = "congruent";

		unicodeToName.put((char) 0xF8E9, "copyrightsans");
		nameToUnicode.put("copyrightsans", (char) 0xF8E9);
		nameToEnc.put("copyrightsans", 227);
		encToName[227] = "copyrightsans";

		unicodeToName.put((char) 0xF6D9, "copyrightserif");
		nameToUnicode.put("copyrightserif", (char) 0xF6D9);
		nameToEnc.put("copyrightserif", 211);
		encToName[211] = "copyrightserif";

		unicodeToName.put((char) 0x00b0, "degree");
		nameToUnicode.put("degree", (char) 0x00b0);
		nameToEnc.put("degree", 176);
		encToName[176] = "degree";

		unicodeToName.put((char) 0x03b4, "delta");
		nameToUnicode.put("delta", (char) 0x03b4);
		nameToEnc.put("delta", 100);
		encToName[100] = "delta";

		unicodeToName.put((char) 0x2666, "diamond");
		nameToUnicode.put("diamond", (char) 0x2666);
		nameToEnc.put("diamond", 168);
		encToName[168] = "diamond";

		unicodeToName.put((char) 0x00f7, "divide");
		nameToUnicode.put("divide", (char) 0x00f7);
		nameToEnc.put("divide", 184);
		encToName[184] = "divide";

		unicodeToName.put((char) 0x22c5, "dotmath");
		nameToUnicode.put("dotmath", (char) 0x22c5);
		nameToEnc.put("dotmath", 215);
		encToName[215] = "dotmath";

		unicodeToName.put((char) 0x0038, "eight");
		nameToUnicode.put("eight", (char) 0x0038);
		nameToEnc.put("eight", 56);
		encToName[56] = "eight";

		unicodeToName.put((char) 0x2208, "element");
		nameToUnicode.put("element", (char) 0x2208);
		nameToEnc.put("element", 206);
		encToName[206] = "element";

		unicodeToName.put((char) 0x2026, "ellipsis");
		nameToUnicode.put("ellipsis", (char) 0x2026);
		nameToEnc.put("ellipsis", 188);
		encToName[188] = "ellipsis";

		unicodeToName.put((char) 0x2205, "emptyset");
		nameToUnicode.put("emptyset", (char) 0x2205);
		nameToEnc.put("emptyset", 198);
		encToName[198] = "emptyset";

		unicodeToName.put((char) 0x03b5, "epsilon");
		nameToUnicode.put("epsilon", (char) 0x03b5);
		nameToEnc.put("epsilon", 101);
		encToName[101] = "epsilon";

		unicodeToName.put((char) 0x003d, "equal");
		nameToUnicode.put("equal", (char) 0x003d);
		nameToEnc.put("equal", 61);
		encToName[61] = "equal";

		unicodeToName.put((char) 0x2261, "equivalence");
		nameToUnicode.put("equivalence", (char) 0x2261);
		nameToEnc.put("equivalence", 186);
		encToName[186] = "equivalence";

		unicodeToName.put((char) 0x03b7, "eta");
		nameToUnicode.put("eta", (char) 0x03b7);
		nameToEnc.put("eta", 104);
		encToName[104] = "eta";

		unicodeToName.put((char) 0x0021, "exclam");
		nameToUnicode.put("exclam", (char) 0x0021);
		nameToEnc.put("exclam", 33);
		encToName[33] = "exclam";

		unicodeToName.put((char) 0x2203, "existential");
		nameToUnicode.put("existential", (char) 0x2203);
		nameToEnc.put("existential", 36);
		encToName[36] = "existential";

		unicodeToName.put((char) 0x0035, "five");
		nameToUnicode.put("five", (char) 0x0035);
		nameToEnc.put("five", 53);
		encToName[53] = "five";

		unicodeToName.put((char) 0x0192, "florin");
		nameToUnicode.put("florin", (char) 0x0192);
		nameToEnc.put("florin", 166);
		encToName[166] = "florin";

		unicodeToName.put((char) 0x0034, "four");
		nameToUnicode.put("four", (char) 0x0034);
		nameToEnc.put("four", 52);
		encToName[52] = "four";

		unicodeToName.put((char) 0x2044, "fraction");
		nameToUnicode.put("fraction", (char) 0x2044);
		nameToEnc.put("fraction", 164);
		encToName[164] = "fraction";

		unicodeToName.put((char) 0x03b3, "gamma");
		nameToUnicode.put("gamma", (char) 0x03b3);
		nameToEnc.put("gamma", 103);
		encToName[103] = "gamma";

		unicodeToName.put((char) 0x2207, "gradient");
		nameToUnicode.put("gradient", (char) 0x2207);
		nameToEnc.put("gradient", 209);
		encToName[209] = "gradient";

		unicodeToName.put((char) 0x003e, "greater");
		nameToUnicode.put("greater", (char) 0x003e);
		nameToEnc.put("greater", 62);
		encToName[62] = "greater";

		unicodeToName.put((char) 0x2265, "greaterequal");
		nameToUnicode.put("greaterequal", (char) 0x2265);
		nameToEnc.put("greaterequal", 179);
		encToName[179] = "greaterequal";

		unicodeToName.put((char) 0x2660, "heart");
		nameToUnicode.put("heart", (char) 0x2660);
		nameToEnc.put("heart", 169);
		encToName[169] = "heart";

		unicodeToName.put((char) 0x221e, "infinity");
		nameToUnicode.put("infinity", (char) 0x221e);
		nameToEnc.put("infinity", 165);
		encToName[165] = "infinity";

		unicodeToName.put((char) 0x222b, "integral");
		nameToUnicode.put("integral", (char) 0x222b);
		nameToEnc.put("integral", 242);
		encToName[242] = "integral";

		unicodeToName.put((char) 0x2320, "integraltp");
		nameToUnicode.put("integraltp", (char) 0x2320);
		nameToEnc.put("integraltp", 243);
		encToName[243] = "integraltp";

		unicodeToName.put((char) 0xF8F5, "integralex");
		nameToUnicode.put("integralex", (char) 0xF8F5);
		nameToEnc.put("integralex", 244);
		encToName[244] = "integralex";

		unicodeToName.put((char) 0x2321, "integralbt");
		nameToUnicode.put("integralbt", (char) 0x2321);
		nameToEnc.put("integralbt", 245);
		encToName[245] = "integralbt";

		unicodeToName.put((char) 0x2229, "intersection");
		nameToUnicode.put("intersection", (char) 0x2229);
		nameToEnc.put("intersection", 199);
		encToName[199] = "intersection";

		unicodeToName.put((char) 0x03b9, "iota");
		nameToUnicode.put("iota", (char) 0x03b9);
		nameToEnc.put("iota", 105);
		encToName[105] = "iota";

		unicodeToName.put((char) 0x03ba, "kappa");
		nameToUnicode.put("kappa", (char) 0x03ba);
		nameToEnc.put("kappa", 107);
		encToName[107] = "kappa";

		unicodeToName.put((char) 0x03bb, "lambda");
		nameToUnicode.put("lambda", (char) 0x03bb);
		nameToEnc.put("lambda", 108);
		encToName[108] = "lambda";

		unicodeToName.put((char) 0x003c, "less");
		nameToUnicode.put("less", (char) 0x003c);
		nameToEnc.put("less", 60);
		encToName[60] = "less";

		unicodeToName.put((char) 0x2264, "lessequal");
		nameToUnicode.put("lessequal", (char) 0x2264);
		nameToEnc.put("lessequal", 163);
		encToName[163] = "lessequal";

		unicodeToName.put((char) 0x2227, "logicaland");
		nameToUnicode.put("logicaland", (char) 0x2227);
		nameToEnc.put("logicaland", 217);
		encToName[217] = "logicaland";

		unicodeToName.put((char) 0x00ac, "logicalnot");
		nameToUnicode.put("logicalnot", (char) 0x00ac);
		nameToEnc.put("logicalnot", 216);
		encToName[216] = "logicalnot";

		unicodeToName.put((char) 0x2228, "logicalor");
		nameToUnicode.put("logicalor", (char) 0x2228);
		nameToEnc.put("logicalor", 218);
		encToName[218] = "logicalor";

		unicodeToName.put((char) 0x25ca, "lozenge");
		nameToUnicode.put("lozenge", (char) 0x25ca);
		nameToEnc.put("lozenge", 224);
		encToName[224] = "lozenge";

		unicodeToName.put((char) 0x2212, "minus");
		nameToUnicode.put("minus", (char) 0x2212);
		nameToEnc.put("minus", 45);
		encToName[45] = "minus";

		unicodeToName.put((char) 0x2032, "minute");
		nameToUnicode.put("minute", (char) 0x2032);
		nameToEnc.put("minute", 162);
		encToName[162] = "minute";

		unicodeToName.put((char) 0x03bc, "mu");
		nameToUnicode.put("mu", (char) 0x03bc);
		nameToEnc.put("mu", 109);
		encToName[109] = "mu";

		unicodeToName.put((char) 0x00d7, "multiply");
		nameToUnicode.put("multiply", (char) 0x00d7);
		nameToEnc.put("multiply", 180);
		encToName[180] = "multiply";

		unicodeToName.put((char) 0x0039, "nine");
		nameToUnicode.put("nine", (char) 0x0039);
		nameToEnc.put("nine", 57);
		encToName[57] = "nine";

		unicodeToName.put((char) 0x2209, "notelement");
		nameToUnicode.put("notelement", (char) 0x2209);
		nameToEnc.put("notelement", 207);
		encToName[207] = "notelement";

		unicodeToName.put((char) 0x2260, "notequal");
		nameToUnicode.put("notequal", (char) 0x2260);
		nameToEnc.put("notequal", 185);
		encToName[185] = "notequal";

		unicodeToName.put((char) 0x2284, "notsubset");
		nameToUnicode.put("notsubset", (char) 0x2284);
		nameToEnc.put("notsubset", 203);
		encToName[203] = "notsubset";

		unicodeToName.put((char) 0x03bd, "nu");
		nameToUnicode.put("nu", (char) 0x03bd);
		nameToEnc.put("nu", 110);
		encToName[110] = "nu";

		unicodeToName.put((char) 0x0023, "numbersign");
		nameToUnicode.put("numbersign", (char) 0x0023);
		nameToEnc.put("numbersign", 35);
		encToName[35] = "numbersign";

		unicodeToName.put((char) 0x03c9, "omega");
		nameToUnicode.put("omega", (char) 0x03c9);
		nameToEnc.put("omega", 119);
		encToName[119] = "omega";

		unicodeToName.put((char) 0x03d6, "omega1");
		nameToUnicode.put("omega1", (char) 0x03d6);
		nameToEnc.put("omega1", 118);
		encToName[118] = "omega1";

		unicodeToName.put((char) 0x03bf, "omicron");
		nameToUnicode.put("omicron", (char) 0x03bf);
		nameToEnc.put("omicron", 111);
		encToName[111] = "omicron";

		unicodeToName.put((char) 0x0031, "one");
		nameToUnicode.put("one", (char) 0x0031);
		nameToEnc.put("one", 49);
		encToName[49] = "one";

		unicodeToName.put((char) 0x0028, "parenleft");
		nameToUnicode.put("parenleft", (char) 0x0028);
		nameToEnc.put("parenleft", 40);
		encToName[40] = "parenleft";

		unicodeToName.put((char) 0x0029, "parenright");
		nameToUnicode.put("parenright", (char) 0x0029);
		nameToEnc.put("parenright", 41);
		encToName[41] = "parenright";

		unicodeToName.put((char) 0xF8EB, "parenlefttp");
		nameToUnicode.put("parenlefttp", (char) 0xF8EB);
		nameToEnc.put("parenlefttp", 230);
		encToName[230] = "parenlefttp";

		unicodeToName.put((char) 0xF8EC, "parenleftex");
		nameToUnicode.put("parenleftex", (char) 0xF8EC);
		nameToEnc.put("parenleftex", 231);
		encToName[231] = "parenleftex";

		unicodeToName.put((char) 0xF8ED, "parenleftbt");
		nameToUnicode.put("parenleftbt", (char) 0xF8ED);
		nameToEnc.put("parenleftbt", 232);
		encToName[232] = "parenleftbt";

		unicodeToName.put((char) 0xF8F6, "parenrighttp");
		nameToUnicode.put("parenrighttp", (char) 0xF8F6);
		nameToEnc.put("parenrighttp", 246);
		encToName[246] = "parenrighttp";

		unicodeToName.put((char) 0xF8F7, "parenrightex");
		nameToUnicode.put("parenrightex", (char) 0xF8F7);
		nameToEnc.put("parenrightex", 247);
		encToName[247] = "parenrightex";

		unicodeToName.put((char) 0xF8F8, "parenrightbt");
		nameToUnicode.put("parenrightbt", (char) 0xF8F8);
		nameToEnc.put("parenrightbt", 248);
		encToName[248] = "parenrightbt";

		unicodeToName.put((char) 0x2202, "partialdiff");
		nameToUnicode.put("partialdiff", (char) 0x2202);
		nameToEnc.put("partialdiff", 182);
		encToName[182] = "partialdiff";

		unicodeToName.put((char) 0x0025, "percent");
		nameToUnicode.put("percent", (char) 0x0025);
		nameToEnc.put("percent", 37);
		encToName[37] = "percent";

		unicodeToName.put((char) 0x002e, "period");
		nameToUnicode.put("period", (char) 0x002e);
		nameToEnc.put("period", 46);
		encToName[46] = "period";

		unicodeToName.put((char) 0x22a5, "perpendicular");
		nameToUnicode.put("perpendicular", (char) 0x22a5);
		nameToEnc.put("perpendicular", 94);
		encToName[94] = "perpendicular";

		unicodeToName.put((char) 0x03d5, "phi");
		nameToUnicode.put("phi", (char) 0x03d5);
		nameToEnc.put("phi", 102);
		encToName[102] = "phi";

		unicodeToName.put((char) 0x03c6, "phi1");
		nameToUnicode.put("phi1", (char) 0x03c6);
		nameToEnc.put("phi1", 106);
		encToName[106] = "phi1";

		unicodeToName.put((char) 0x03c0, "pi");
		nameToUnicode.put("pi", (char) 0x03c0);
		nameToEnc.put("pi", 112);
		encToName[112] = "pi";

		unicodeToName.put((char) 0x002b, "plus");
		nameToUnicode.put("plus", (char) 0x002b);
		nameToEnc.put("plus", 43);
		encToName[43] = "plus";

		unicodeToName.put((char) 0x00b1, "plusminus");
		nameToUnicode.put("plusminus", (char) 0x00b1);
		nameToEnc.put("plusminus", 177);
		encToName[177] = "plusminus";

		unicodeToName.put((char) 0x220f, "product");
		nameToUnicode.put("product", (char) 0x220f);
		nameToEnc.put("product", 213);
		encToName[213] = "product";

		unicodeToName.put((char) 0x2282, "propersubset");
		nameToUnicode.put("propersubset", (char) 0x2282);
		nameToEnc.put("propersubset", 204);
		encToName[204] = "propersubset";

		unicodeToName.put((char) 0x2283, "propersuperset");
		nameToUnicode.put("propersuperset", (char) 0x2283);
		nameToEnc.put("propersuperset", 201);
		encToName[201] = "propersuperset";

		unicodeToName.put((char) 0x221d, "proportional");
		nameToUnicode.put("proportional", (char) 0x221d);
		nameToEnc.put("proportional", 181);
		encToName[181] = "proportional";

		unicodeToName.put((char) 0x03c8, "psi");
		nameToUnicode.put("psi", (char) 0x03c8);
		nameToEnc.put("psi", 121);
		encToName[121] = "psi";

		unicodeToName.put((char) 0x003f, "question");
		nameToUnicode.put("question", (char) 0x003f);
		nameToEnc.put("question", 63);
		encToName[63] = "question";

		unicodeToName.put((char) 0x221a, "radical");
		nameToUnicode.put("radical", (char) 0x221a);
		nameToEnc.put("radical", 214);
		encToName[214] = "radical";

		unicodeToName.put((char) 0xF8E5, "radicalex");
		nameToUnicode.put("radicalex", (char) 0xF8E5);
		nameToEnc.put("radicalex", 96);
		encToName[96] = "radicalex";

		unicodeToName.put((char) 0x2286, "reflexsubset");
		nameToUnicode.put("reflexsubset", (char) 0x2286);
		nameToEnc.put("reflexsubset", 205);
		encToName[205] = "reflexsubset";

		unicodeToName.put((char) 0x2287, "reflexsuperset");
		nameToUnicode.put("reflexsuperset", (char) 0x2287);
		nameToEnc.put("reflexsuperset", 202);
		encToName[202] = "reflexsuperset";

		unicodeToName.put((char) 0xF8E8, "registersans");
		nameToUnicode.put("registersans", (char) 0xF8E8);
		nameToEnc.put("registersans", 226);
		encToName[226] = "registersans";

		unicodeToName.put((char) 0xF6DA, "registerserif");
		nameToUnicode.put("registerserif", (char) 0xF6DA);
		nameToEnc.put("registerserif", 210);
		encToName[210] = "registerserif";

		unicodeToName.put((char) 0x03c1, "rho");
		nameToUnicode.put("rho", (char) 0x03c1);
		nameToEnc.put("rho", 114);
		encToName[114] = "rho";

		unicodeToName.put((char) 0x2033, "second");
		nameToUnicode.put("second", (char) 0x2033);
		nameToEnc.put("second", 178);
		encToName[178] = "second";

		unicodeToName.put((char) 0x003b, "semicolon");
		nameToUnicode.put("semicolon", (char) 0x003b);
		nameToEnc.put("semicolon", 59);
		encToName[59] = "semicolon";

		unicodeToName.put((char) 0x0037, "seven");
		nameToUnicode.put("seven", (char) 0x0037);
		nameToEnc.put("seven", 55);
		encToName[55] = "seven";

		unicodeToName.put((char) 0x03c3, "sigma");
		nameToUnicode.put("sigma", (char) 0x03c3);
		nameToEnc.put("sigma", 115);
		encToName[115] = "sigma";

		unicodeToName.put((char) 0x03c2, "sigma1");
		nameToUnicode.put("sigma1", (char) 0x03c2);
		nameToEnc.put("sigma1", 86);
		encToName[86] = "sigma1";

		unicodeToName.put((char) 0x223c, "similar");
		nameToUnicode.put("similar", (char) 0x223c);
		nameToEnc.put("similar", 126);
		encToName[126] = "similar";

		unicodeToName.put((char) 0x0036, "six");
		nameToUnicode.put("six", (char) 0x0036);
		nameToEnc.put("six", 54);
		encToName[54] = "six";

		unicodeToName.put((char) 0x002f, "slash");
		nameToUnicode.put("slash", (char) 0x002f);
		nameToEnc.put("slash", 47);
		encToName[47] = "slash";

		unicodeToName.put((char) 0x0020, "space");
		nameToUnicode.put("space", (char) 0x0020);
		nameToEnc.put("space", 32);
		encToName[32] = "space";

		unicodeToName.put((char) 0x2660, "spade");
		nameToUnicode.put("spade", (char) 0x2660);
		nameToEnc.put("spade", 170);
		encToName[170] = "spade";

		unicodeToName.put((char) 0x220b, "suchthat");
		nameToUnicode.put("suchthat", (char) 0x220b);
		nameToEnc.put("suchthat", 39);
		encToName[39] = "suchthat";

		unicodeToName.put((char) 0x2211, "summation");
		nameToUnicode.put("summation", (char) 0x2211);
		nameToEnc.put("summation", 229);
		encToName[229] = "summation";

		unicodeToName.put((char) 0x03c4, "tau");
		nameToUnicode.put("tau", (char) 0x03c4);
		nameToEnc.put("tau", 116);
		encToName[116] = "tau";

		unicodeToName.put((char) 0x2234, "therefore");
		nameToUnicode.put("therefore", (char) 0x2234);
		nameToEnc.put("therefore", 92);
		encToName[92] = "therefore";

		unicodeToName.put((char) 0x03b8, "theta");
		nameToUnicode.put("theta", (char) 0x03b8);
		nameToEnc.put("theta", 113);
		encToName[113] = "theta";

		unicodeToName.put((char) 0x03d1, "theta1");
		nameToUnicode.put("theta1", (char) 0x03d1);
		nameToEnc.put("theta1", 74);
		encToName[74] = "theta1";

		unicodeToName.put((char) 0x0033, "three");
		nameToUnicode.put("three", (char) 0x0033);
		nameToEnc.put("three", 51);
		encToName[51] = "three";

		unicodeToName.put((char) 0xF8EA, "trademarksans");
		nameToUnicode.put("trademarksans", (char) 0xF8EA);
		nameToEnc.put("trademarksans", 228);
		encToName[228] = "trademarksans";

		unicodeToName.put((char) 0xF6DB, "trademarkserif");
		nameToUnicode.put("trademarkserif", (char) 0xF6DB);
		nameToEnc.put("trademarkserif", 212);
		encToName[212] = "trademarkserif";

		unicodeToName.put((char) 0x0032, "two");
		nameToUnicode.put("two", (char) 0x0032);
		nameToEnc.put("two", 50);
		encToName[50] = "two";

		unicodeToName.put((char) 0x005f, "underscore");
		nameToUnicode.put("underscore", (char) 0x005f);
		nameToEnc.put("underscore", 95);
		encToName[95] = "underscore";

		unicodeToName.put((char) 0x222a, "union");
		nameToUnicode.put("union", (char) 0x222a);
		nameToEnc.put("union", 200);
		encToName[200] = "union";

		unicodeToName.put((char) 0x2200, "universal");
		nameToUnicode.put("universal", (char) 0x2200);
		nameToEnc.put("universal", 34);
		encToName[34] = "universal";

		unicodeToName.put((char) 0x03c5, "upsilon");
		nameToUnicode.put("upsilon", (char) 0x03c5);
		nameToEnc.put("upsilon", 117);
		encToName[117] = "upsilon";

		unicodeToName.put((char) 0x2118, "weierstrass");
		nameToUnicode.put("weierstrass", (char) 0x2118);
		nameToEnc.put("weierstrass", 195);
		encToName[195] = "weierstrass";

		unicodeToName.put((char) 0x03be, "xi");
		nameToUnicode.put("xi", (char) 0x03be);
		nameToEnc.put("xi", 120);
		encToName[120] = "xi";

		unicodeToName.put((char) 0x0030, "zero");
		nameToUnicode.put("zero", (char) 0x0030);
		nameToEnc.put("zero", 48);
		encToName[48] = "zero";

		unicodeToName.put((char) 0x03b6, "zeta");
		nameToUnicode.put("zeta", (char) 0x03b6);
		nameToEnc.put("zeta", 122);
		encToName[122] = "zeta";

	}

	@Override
	public String toName(Character c) {
		return unicodeToName.get(c);
	}

	@Override
	public String toName(int enc) {
		if (enc != 0) {
			return encToName[enc];
		}
		return null;
	}

	@Override
	public int toEncoding(String name) {
		return nameToEnc.get(name);
	}

	@Override
	public char toUnicode(String name) {
		return nameToUnicode.get(name);
	}

	@Override
	public String getName() {
		return "Symbol";
	}

	@Override
	public String getEncoding() {
		return "";
	}

}
